{
	"name": "silverDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source1",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "ds_source2",
						"type": "DatasetReference"
					},
					"name": "DimFlight"
				},
				{
					"dataset": {
						"referenceName": "ds_source3",
						"type": "DatasetReference"
					},
					"name": "DimPassenger"
				},
				{
					"dataset": {
						"referenceName": "ds_source5",
						"type": "DatasetReference"
					},
					"name": "GitHub"
				},
				{
					"dataset": {
						"referenceName": "ds_source4",
						"type": "DatasetReference"
					},
					"name": "IncrementalData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "target1"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "target2"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "target3"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "target4"
				},
				{
					"linkedService": {
						"referenceName": "ls_datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnCountry"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedcolumnFlag"
				},
				{
					"name": "filterAge"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedAirportNames"
				},
				{
					"name": "alterGithub"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterdimFlight"
				},
				{
					"name": "alterdimPassenger"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as string,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DimAirline",
				"source(output(",
				"          flight_id as string,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DimFlight",
				"source(output(",
				"          passenger_id as string,",
				"          full_name as string,",
				"          gender as string,",
				"          age as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> DimPassenger",
				"source(output(",
				"          airport_id as short,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> GitHub",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> IncrementalData",
				"DimAirline derive(country = upper(country)) ~> derivedColumnCountry",
				"DimFlight select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_timestamp = departure_time,",
				"          arrival_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"DimPassenger select(mapColumn(",
				"          passenger_id,",
				"          full_name,",
				"          gender_flag = gender,",
				"          age,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(gender_flag = iif(\r",
				"    gender_flag=='M',\r",
				"regexReplace(gender_flag, \"M\", \"Male\"),\r",
				"regexReplace(gender_flag, \"F\", \"Female\")\r",
				")) ~> derivedcolumnFlag",
				"derivedcolumnFlag filter(age>'25' && country!='Mexico') ~> filterAge",
				"filterAge derive(first_name = substringIndex(full_name, \" \", 1)) ~> derivedColumn1",
				"IncrementalData cast(output(",
				"          ticket_cost as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"GitHub derive(airport_name = lower(airport_name)) ~> derivedAirportNames",
				"derivedAirportNames alterRow(upsertIf(1==1)) ~> alterGithub",
				"derivedColumnCountry alterRow(upsertIf(1==1)) ~> alterRow2",
				"selectColumns alterRow(upsertIf(1==1)) ~> alterdimFlight",
				"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterdimPassenger",
				"cast1 alterRow(upsertIf(1==1)) ~> AlterRow1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airline_id'],",
				"     umask: 0775,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> target1",
				"alterdimFlight sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlight',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['flight_id'],",
				"     umask: 0775,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> target2",
				"alterdimPassenger sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimPassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['passenger_id'],",
				"     umask: 0775,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> target3",
				"alterGithub sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimGitHub',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['airport_id'],",
				"     umask: 0775,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> target4",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'incrementaldata',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['booking_id','passenger_id','flight_id','airline_id'],",
				"     umask: 0775,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}